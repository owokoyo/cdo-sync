{
	"[Owokoyo/cdo-sync]: Nomx": {
		"name": "Nomx",
		"description": "Nomx Framework",
		"functions": [],
		"dropletConfig": [],
		"source": "}); Nomx = (function() {\n    var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * Nomx\n * The most advanced framework for Applab. Ever.\n * - Build components via class extension as well and native types.\n * - Features an object oriented system that supports JSX syntax and full typescript support.\n * - Built-in html parser and extensive use of getAttribute gives access to previously off limit properties, such as:\n *   # The channelId of the app.\n *   # The children of an element.\n *   # The screens and active screen of a project.\n *   # And more!\n *\n * @example\n * class ChatContainerSingleton extends Nomx.Container {\n * \t\taddMessage(message: string){\n * \t\t\tthis.addChildren(<div>{message}</div>)\n * \t\t}\n * }\n * const chatContainer = <ChatContainerSingleton style=\"position: absolute; width: 100%; height: 100%; overflow: auto\"/> as ChatContainerSingleton\n * chatContainer.addMessage(\"hi, how are you\");\n * chatContainer.addMessage(\"I'm fine\");\n*/\nvar Nomx;\n(function (Nomx) {\n    var prefix = \"Nomx_Gen_\";\n    var counter = 0;\n    Nomx.ElementsById = {};\n    /*\n * HTML Parser By John Resig (ejohn.org)\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n    (modified to work with code.org since code.org is :trashcan:)\n */\n    Nomx.parser = (function () {\n        // Regular Expressions for parsing tags and attributes\n        var startTag = /^<([-A-Za-z0-9_]+)((?:\\s+[-A-Z-a-z0-9_]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/, endTag = /^<\\/([-A-Za-z0-9_]+)[^>]*>/, attr = /([-A-Za-z0-9_]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g, attr2 = /([-A-Za-z0-9_]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/;\n        // Empty Elements - HTML 4.01\n        var empty = makeMap(\"area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed\");\n        // Block Elements - HTML 4.01\n        var block = makeMap(\"address,applet,blockquote,button,center,dd,del,dir,div,dl,dt,fieldset,form,frameset,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,p,pre,script,table,tbody,td,tfoot,th,thead,tr,ul\");\n        // Inline Elements - HTML 4.01\n        var inline = makeMap(\"a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var\");\n        // Elements that you can, intentionally, leave open\n        // (and which close themselves)\n        var closeSelf = makeMap(\"colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr\");\n        // Attributes that have their values filled in disabled=\"disabled\"\n        var fillAttrs = makeMap(\"checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected\");\n        // Special Elements (can contain anything)\n        var special = makeMap(\"script,style\");\n        var HTMLParser = function (html, handler) {\n            var index, chars, match, stack = [], last = html;\n            stack.last = function () {\n                return this[this.length - 1];\n            };\n            while (html) {\n                chars = true;\n                // Make sure we're not in a script or style element\n                if (!stack.last() || !special[stack.last()]) {\n                    // Comment\n                    if (html.indexOf(\"<!--\") == 0) {\n                        index = html.indexOf(\"-->\");\n                        if (index >= 0) {\n                            if (handler.comment)\n                                handler.comment(html.substring(4, index));\n                            html = html.substring(index + 3);\n                            chars = false;\n                        }\n                        // end tag\n                    }\n                    else if (html.indexOf(\"</\") == 0) {\n                        match = html.match(endTag);\n                        if (match) {\n                            html = html.substring(match[0].length);\n                            parseEndTag(match[0], match[1]);\n                            chars = false;\n                        }\n                        // start tag\n                    }\n                    else if (html.indexOf(\"<\") == 0) {\n                        match = html.match(startTag);\n                        if (match) {\n                            html = html.substring(match[0].length);\n                            parseStartTag(match[0], match[1], match[2], match[3]);\n                            chars = false;\n                        }\n                    }\n                    if (chars) {\n                        index = html.indexOf(\"<\");\n                        var text = index < 0 ? html : html.substring(0, index);\n                        html = index < 0 ? \"\" : html.substring(index);\n                        if (handler.chars)\n                            handler.chars(text);\n                    }\n                }\n                else {\n                    var regex = new RegExp(\"(.*)<\\/\" + stack.last() + \"[^>]*>\");\n                    var m = html.match(regex);\n                    if (m) {\n                        m[1] = m[1].replace(/<!--(.*?)-->/g, \"$1\")\n                            .replace(/<!\\[CDATA\\[(.*?)]]>/g, \"$1\");\n                        if (handler.chars)\n                            handler.chars(m[1]);\n                    }\n                    parseEndTag(\"\", stack.last());\n                    html = html.replace(regex, \"\");\n                }\n                if (html == last)\n                    throw \"Parse Error: \" + html;\n                last = html;\n            }\n            // Clean up any remaining tags\n            parseEndTag();\n            function parseStartTag(tag, tagName, rest, unary) {\n                tagName = tagName.toLowerCase();\n                if (block[tagName]) {\n                    while (stack.last() && inline[stack.last()]) {\n                        parseEndTag(\"\", stack.last());\n                    }\n                }\n                if (closeSelf[tagName] && stack.last() == tagName) {\n                    parseEndTag(\"\", tagName);\n                }\n                unary = empty[tagName] || !!unary;\n                if (!unary)\n                    stack.push(tagName);\n                if (handler.start) {\n                    var attrs = [];\n                    var ml = rest.match(attr);\n                    if (ml) {\n                        for (var _i = 0, ml_1 = ml; _i < ml_1.length; _i++) {\n                            var atr = ml_1[_i];\n                            var m = attr2.exec(atr);\n                            var value = m[2] ? m[2] :\n                                m[3] ? m[3] :\n                                    m[4] ? m[4] :\n                                        fillAttrs[m[1]] ? m[1] : \"\";\n                            attrs.push({\n                                name: m[1],\n                                value: value,\n                                escaped: value.replace(/(^|[^\\\\])\"/g, '$1\\\\\\\"') //\"\n                            });\n                        }\n                        ;\n                    }\n                    if (handler.start)\n                        handler.start(tagName, attrs, unary);\n                }\n                return \"\";\n            }\n            function parseEndTag(tag, tagName) {\n                // If no tag name is provided, clean shop\n                if (!tagName)\n                    var pos = 0;\n                // Find the closest opened tag of the same type\n                else\n                    for (var pos = stack.length - 1; pos >= 0; pos--)\n                        if (stack[pos] == tagName)\n                            break;\n                if (pos >= 0) {\n                    // Close all the open elements, up the stack\n                    for (var i = stack.length - 1; i >= pos; i--)\n                        if (handler.end)\n                            handler.end(stack[i]);\n                    // Remove the open elements from the stack\n                    stack.length = pos;\n                }\n                return \"\";\n            }\n        };\n        function makeMap(str) {\n            var obj = {}, items = str.split(\",\");\n            for (var i = 0; i < items.length; i++)\n                obj[items[i]] = true;\n            return obj;\n        }\n        return {\n            nodes: function (str) {\n                var list = [];\n                HTMLParser(str, {\n                    start: function (tag, attributes) {\n                        var attrs = {};\n                        var id;\n                        for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {\n                            var attribute = attributes_1[_i];\n                            attrs[attribute.name] = attribute.value;\n                            if (attribute.name === \"id\") {\n                                id = attribute.value;\n                            }\n                        }\n                        if (id)\n                            list.push({ tag: tag, id: id, attributes: attrs });\n                    }\n                });\n                return list;\n            },\n            tree: function (str) {\n                var stack = [{ children: [] }];\n                HTMLParser(str, {\n                    start: function (tag, attributes) {\n                        var id;\n                        for (var _i = 0, attributes_2 = attributes; _i < attributes_2.length; _i++) {\n                            var attribute = attributes_2[_i];\n                            if (attribute.name === \"id\") {\n                                id = attribute.value;\n                                break;\n                            }\n                        }\n                        var node = {\n                            tag: tag,\n                            attributes: attributes,\n                            children: [],\n                            id: id,\n                        };\n                        stack[stack.length - 1].children.push(node);\n                        stack.push(node);\n                    },\n                    end: function () {\n                        if (stack.length > 1) {\n                            stack.pop();\n                        }\n                        else {\n                            console.log(\"something is wrong\");\n                        }\n                    }\n                });\n                return stack[0].children;\n            }\n        };\n    })();\n    var Element = /** @class */ (function () {\n        function Element(isNew, id, children) {\n            this._lastinnerHTML = \"\";\n            this._innerHTMLTree = [];\n            this.props = {};\n            this.id = id;\n        }\n        Object.defineProperty(Element.prototype, \"innerHTMLTree\", {\n            get: function () {\n                if (this._lastinnerHTML === this.innerHTML) {\n                    return this._innerHTMLTree;\n                }\n                else {\n                    this._lastinnerHTML = this.innerHTML;\n                    this._innerHTMLTree = Nomx.parser.tree(this.innerHTML);\n                    return this._innerHTMLTree;\n                }\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(Element.prototype, \"className\", {\n            get: function () {\n                return this.getAttribute(\"className\");\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(Element.prototype, \"children\", {\n            get: function () {\n                return this.innerHTMLTree.map(function (e) { return get(e.id, \"container\"); });\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Element.prototype.setStyle = function (style) {\n            setStyle(this.id, style);\n        };\n        Object.defineProperty(Element.prototype, \"backgroundColor\", {\n            get: function () {\n                return getProperty(this.id, \"background-color\");\n            },\n            set: function (color) {\n                setProperty(this.id, \"background-color\", color);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(Element.prototype, \"tagName\", {\n            get: function () {\n                return this.getAttribute(\"tagName\");\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(Element.prototype, \"style\", {\n            get: function () {\n                return this.getAttribute(\"style\");\n            },\n            set: function (style) {\n                this.setStyle(style);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(Element.prototype, \"innerHTML\", {\n            get: function () {\n                return this.getAttribute(\"innerHTML\");\n            },\n            set: function (innerhtml) {\n                innerHTML(this.id, innerhtml);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(Element.prototype, \"scrollHeight\", {\n            get: function () {\n                return getAttribute(this.id, \"scrollHeight\");\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(Element.prototype, \"scrollTop\", {\n            get: function () {\n                return parseInt(getAttribute(this.id, \"scrollTop\"));\n            },\n            set: function (y) {\n                setAttribute(this.id, \"scrollTop\", y);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        /**\n         * Returns toString()'d representation of the attribute value.\n         */\n        Element.prototype.getAttribute = function (attribute) {\n            return getAttribute(this.id, attribute);\n        };\n        Element.prototype.setAttribute = function (attribute, value) {\n            return setAttribute(this.id, attribute, value);\n        };\n        Element.prototype.addChildren = function () {\n            var children = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                children[_i] = arguments[_i];\n            }\n            if (Array.isArray(children[0])) {\n                children = children[0];\n            }\n            for (var _a = 0, _b = children; _a < _b.length; _a++) {\n                var child = _b[_a];\n                child.parent = this;\n            }\n        };\n        return Element;\n    }());\n    Nomx.Element = Element;\n    var DestructibleElement = /** @class */ (function (_super) {\n        __extends(DestructibleElement, _super);\n        function DestructibleElement() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(DestructibleElement.prototype, \"parent\", {\n            get: function () {\n                return this._parent;\n            },\n            set: function (parent) {\n                if (!parent) {\n                    parent = limbo;\n                }\n                ;\n                setParent(this.id, parent.id);\n                this._parent = parent;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(DestructibleElement.prototype, \"display\", {\n            set: function (display) {\n                this.setStyle(\"display: \" + display);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(DestructibleElement.prototype, \"position\", {\n            set: function (position) {\n                this.setStyle(\"position: \" + position);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(DestructibleElement.prototype, \"left\", {\n            set: function (value) {\n                this.setStyle(\"position: \" + (typeof value === \"number\" ? value + \"px\" : value));\n            },\n            enumerable: false,\n            configurable: true\n        });\n        DestructibleElement.prototype.delete = function () {\n            deleteElement(this.id);\n        };\n        return DestructibleElement;\n    }(Element));\n    Nomx.DestructibleElement = DestructibleElement;\n    var TextElement = /** @class */ (function (_super) {\n        __extends(TextElement, _super);\n        function TextElement() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(TextElement.prototype, \"textColor\", {\n            get: function () {\n                return getProperty(this.id, \"text-color\");\n            },\n            set: function (color) {\n                setProperty(this.id, \"text-color\", color);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(TextElement.prototype, \"text\", {\n            get: function () {\n                return getProperty(this.id, \"text\");\n            },\n            set: function (text) {\n                setProperty(this.id, \"text\", text);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        return TextElement;\n    }(DestructibleElement));\n    Nomx.TextElement = TextElement;\n    var Label = /** @class */ (function (_super) {\n        __extends(Label, _super);\n        function Label(isNew, id) {\n            var _this = _super.call(this, isNew, id) || this;\n            if (isNew) {\n                textLabel(id, \"\");\n            }\n            return _this;\n        }\n        return Label;\n    }(TextElement));\n    Nomx.Label = Label;\n    var Button = /** @class */ (function (_super) {\n        __extends(Button, _super);\n        function Button(isNew, id) {\n            var _this = _super.call(this, isNew, id) || this;\n            if (isNew) {\n                button(id, \"\");\n            }\n            return _this;\n        }\n        Object.defineProperty(Button.prototype, \"onClick\", {\n            set: function (callback) {\n                onEvent(this.id, \"click\", callback);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        return Button;\n    }(TextElement));\n    Nomx.Button = Button;\n    var Input = /** @class */ (function (_super) {\n        __extends(Input, _super);\n        function Input(isNew, id) {\n            var _this = _super.call(this, isNew, id) || this;\n            if (isNew) {\n                textInput(id, \"\");\n            }\n            return _this;\n        }\n        Input.prototype.onSubmit = function (callback) {\n            onEvent(this.id, \"keypress\", function (key) {\n            });\n        };\n        return Input;\n    }(TextElement));\n    Nomx.Input = Input;\n    var Container = /** @class */ (function (_super) {\n        __extends(Container, _super);\n        function Container(isNew, id) {\n            var _this = _super.call(this, isNew, id) || this;\n            if (isNew) {\n                container(id, \"\");\n            }\n            return _this;\n        }\n        return Container;\n    }(TextElement));\n    Nomx.Container = Container;\n    var Screen = /** @class */ (function (_super) {\n        __extends(Screen, _super);\n        function Screen(isNew, id, children) {\n            var _this = _super.call(this, isNew, id) || this;\n            if (isNew) {\n                Nomx.root.innerHTML += \"<div class=\\\"screen\\\" tabindex=\\\"1\\\" data-theme=\\\"default\\\" id=\\\"\" + id + \"\\\" style=\\\"display: none; height: 450px; width: 320px; left: 0px; top: 0px; position: absolute; z-index: 0; background-color: rgb(255, 255, 255);\\\"></div>\";\n            }\n            return _this;\n        }\n        Object.defineProperty(Screen.prototype, \"isActiveScreen\", {\n            get: function () {\n                return this.style.match(\"display: none\") !== null;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        return Screen;\n    }(TextElement));\n    Nomx.Screen = Screen;\n    var Span = /** @class */ (function (_super) {\n        __extends(Span, _super);\n        function Span(isNew, id) {\n            var _this = _super.call(this, isNew, id) || this;\n            _this.setStyle(\"display: inline; padding: 0px\");\n            return _this;\n        }\n        return Span;\n    }(Container));\n    Nomx.Span = Span;\n    var Break = /** @class */ (function (_super) {\n        __extends(Break, _super);\n        function Break(isNew, id) {\n            var _this = _super.call(this, isNew, id) || this;\n            if (isNew) {\n                _this.style = \"margin-bottom: 10px\";\n            }\n            return _this;\n        }\n        return Break;\n    }(Container));\n    Nomx.Break = Break;\n    //singleton class that represents divApplab\n    var Root = /** @class */ (function (_super) {\n        __extends(Root, _super);\n        function Root() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(Root.prototype, \"nodes\", {\n            get: function () {\n                return Nomx.parser.nodes(this.innerHTML);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(Root.prototype, \"screens\", {\n            get: function () {\n                return this.children.filter(function (c) {\n                    return c.className === \"screen\";\n                });\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(Root.prototype, \"activeScreen\", {\n            get: function () {\n                return this.children.filter(function (c) {\n                    return c.className === \"screen\" && c.style.match(\"display: none\");\n                })[0];\n            },\n            enumerable: false,\n            configurable: true\n        });\n        return Root;\n    }(Element));\n    Nomx.Root = Root;\n    var allIndex = {\n        div: Container,\n        br: Break,\n        label: Label,\n        button: Button,\n        input: Input,\n        screen: Screen,\n        container: Container,\n        span: Span,\n        element: Element,\n        root: Root\n    };\n    function create(ElementType, props) {\n        var children = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            children[_i - 2] = arguments[_i];\n        }\n        if (props == undefined) {\n            props = {};\n        }\n        if (children.length === 0) {\n            if (Array.isArray(children[0])) {\n                children = children[0];\n            }\n            else if (!children[0]) {\n                children = [];\n            }\n        }\n        if (children.length > 0) {\n            if (children.length === 1 && typeof children[0] === \"string\" && !props.text) {\n                props.text = children[0];\n                children = [];\n            }\n            else {\n                children = children.map(function (element) {\n                    if (typeof element === \"string\") {\n                        return Nomx.create(\"span\", { text: element });\n                    }\n                    return element;\n                });\n            }\n        }\n        var element;\n        //children: [DestructibleElement | string]\n        if (typeof ElementType === \"string\") {\n            element = new allIndex[ElementType](true, prefix + (++counter).toString(), children);\n        }\n        else {\n            element = new ElementType(true, prefix + (++counter).toString(), children);\n        }\n        Nomx.ElementsById[element.id] = element;\n        element.addChildren(children);\n        Object.keys(props).map(function (key) {\n            element[key] = props[key];\n        });\n        return element;\n    }\n    Nomx.create = create;\n    function get(id, ElementType) {\n        if (Nomx.ElementsById[id]) {\n            return Nomx.ElementsById[id];\n        }\n        else if (typeof ElementType === \"string\") {\n            return new allIndex[ElementType](false, id, []);\n        }\n        else {\n            return new ElementType(false, id, []);\n        }\n    }\n    Nomx.get = get;\n    /** Represents divApplab; of which all elements **must** be parented to. */\n    Nomx.root = Nomx.get(\"divApplab\", Root);\n    var uninitiatedIds = [];\n    Nomx.root.nodes.forEach(function (el) {\n        if (el.id !== \"designModeViz\") {\n            var elType = void 0;\n            if (el.attributes.class === \"screen\") {\n                elType = \"screen\";\n            }\n            else if (el.tag === \"button\") {\n                elType = \"button\";\n            }\n            else if (el.tag === \"input\") {\n                elType = \"input\";\n            }\n            else if (el.tag === \"div\") {\n                elType = \"container\";\n            }\n            else if (el.tag === \"span\") {\n                elType = \"span\";\n            }\n            else if (el.tag === \"label\") {\n                elType = \"label\";\n            }\n            else {\n                elType = \"container\";\n            }\n            var dt = el.id.match(/^([a-zA-Z0-9\\_\\-]+)(?:\\#([a-zA-Z0-9_\\$]+))?$/);\n            if (dt) {\n                if (dt[2]) {\n                    uninitiatedIds.push(dt);\n                }\n                else {\n                    window[\"$$\" + dt[1]] = Nomx.get(dt[0], elType);\n                }\n            }\n        }\n    });\n    if (uninitiatedIds.length > 0) {\n        console.log(\"Custom classes detected!; Make sure to call Nomx.initiateWithClasses() after class declarations.\");\n    }\n    function initiateWithClasses() {\n        uninitiatedIds.forEach(function (_a) {\n            var id = _a[0], rid = _a[1], c = _a[2];\n            window[\"$$\" + rid] = Nomx.get(id, window[c]);\n        });\n    }\n    Nomx.initiateWithClasses = initiateWithClasses;\n    Nomx.channelId = Nomx.root.getAttribute(\"baseURI\").match(/code.org\\/projects\\/applab\\/([^\\/]+)/)[1];\n    /** A container that elements created using innerHTML are created, in order to prevent overwriting any existing elements */\n    var forge = create(\"container\");\n    forge.display = \"none\";\n    forge.parent = Nomx.root;\n    /** A container elements go to when they are hidden but not necessarily destroyed */\n    var limbo = create(\"container\");\n    limbo.display = \"none\";\n    limbo.parent = Nomx.root;\n})(Nomx || (Nomx = {}));\nvar JSX;\n(function (JSX) {\n    ;\n})(JSX || (JSX = {}));\n;\nreturn Nomx})()\n !(function (){0",
		"originalName": "",
		"versionId": "",
		"channelId": ""
	},
	"[Owokoyo] Baron": {
		"getChannelId": "eta6ZCWkDLuWoc0nIekjAgyZ83MreMaANLZu35rKiEI"
	},
	"[Owokoyo] Nom": {
		"getChannelId": "t9KSTLQoUPPQYNSy036VGtViJ1k-UhDz_RLGQthHn9U"
	},
	"[Ziriksi] Pylon": {
		"getChannelId": "Ax9qgV0qivNghmgVFjsdNPIS_3rPHFeiHbgOZ1dSbtQ"
	},
	"[Letti] Interactive Buttons": {
		"getChannelId": "xRsw3cBip9L7P0LNSjFWi1vJjZuyCavcdPSHlIIxs28"
	},
	"[Ziriksi] Wait": {
		"getChannelId": "9rhUApJXCUNHCuZGG-txvsDBeZgybhFmjJyENTEIDTw"
	},
	"[NeoEmberArts] Neo": {
		"getChannelId": "6Smh9_3VqcQJZocCzJB4Ytxoj0zcoBQc9V7HHilRmoI"
	},
	"[Owokoyo] Soundstream": {
		"getChannelId": "qnbEzeJMNSO02IngGJBBsK25WDV3GSRIy7gZHjFrSEI"
	},
	"[Owokoyo] React": {
		"getChannelId": "rAY3gBePcokHptTRJcbG4cLIyJN_7XpsI41aAE5Ln94"
	},
	"[Owokoyo] UI5 (Deprecated)": {
		"getChannelId": "P8rRZEB5ls2aCC2DDQVcCM8S35StqkoLIRRVxKbRLSA",
		"dependencies": [
			"rAY3gBePcokHptTRJcbG4cLIyJN_7XpsI41aAE5Ln94"
		]
	},
	"[Owokoyo] Ocelot (USE BARON)": {
		"getChannelId": "IwwtHsXq-n6nVMLrmQ1SuK4acsJXWxMUibMz721hvCc",
		"dependencies": [
			"rAY3gBePcokHptTRJcbG4cLIyJN_7XpsI41aAE5Ln94"
		]
	}
}